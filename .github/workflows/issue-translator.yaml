name: 'Issue Assistant Bot'

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  analyze_issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --no-cache openai requests

      - name: Analyze and Translate Issue or Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}
          AZURE_OPENAI_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body || '' }}
          COMMENT_BODY: ${{ github.event.comment.body || '' }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO_FULL_NAME: ${{ github.repository }}
          EVENT_NAME: ${{ github.event_name }}
          ENABLE_BILINGUAL_TITLE: true
        run: |
          python - <<'EOF'
          import os
          import json
          import requests
          from openai import AzureOpenAI

          # --- Configuration ---
          GITHUB_TOKEN = os.environ["GITHUB_TOKEN"]
          AZURE_OPENAI_KEY = os.environ["AZURE_OPENAI_KEY"]
          AZURE_OPENAI_ENDPOINT = os.environ["AZURE_OPENAI_ENDPOINT"]
          AZURE_OPENAI_API_VERSION = os.environ.get("AZURE_OPENAI_API_VERSION", "2024-02-01")
          AZURE_OPENAI_DEPLOYMENT = os.environ.get("AZURE_OPENAI_DEPLOYMENT") or "gpt-4o"

          ISSUE_TITLE = os.environ["ISSUE_TITLE"]
          ISSUE_BODY = os.environ.get("ISSUE_BODY", "")
          COMMENT_BODY = os.environ.get("COMMENT_BODY", "")
          ISSUE_NUMBER = os.environ["ISSUE_NUMBER"]
          REPO_FULL_NAME = os.environ["REPO_FULL_NAME"]
          EVENT_NAME = os.environ["EVENT_NAME"]

          # Convert string environment variable to boolean
          ENABLE_BILINGUAL_TITLE = os.environ.get("ENABLE_BILINGUAL_TITLE", "false").lower() in ("true", "yes", "1")

          BOT_COMMENT_HEADER = "**Issue Assistant Bot** :robot::"

          # --- Azure OpenAI Client ---
          try:
              client = AzureOpenAI(
                  api_key=AZURE_OPENAI_KEY,
                  azure_endpoint=AZURE_OPENAI_ENDPOINT,
                  api_version=AZURE_OPENAI_API_VERSION,
              )
          except Exception as e:
              print(f"Error initializing Azure OpenAI client: {e}")
              exit(1)

          # --- Helper Functions ---
          def analyze_language_and_issue(title, body):
              """Analyze the issue language and quality using Azure OpenAI"""
              system_prompt = """You are an issue assistant for a software project. 
              Perform the following tasks:
              1. Detect the language of the issue (title and body).
              2. Determine if the issue is written in English. If not, identify the language.

              Return your analysis in JSON format with the following fields:
              - language_name: The detected language name (e.g., "English", "Chinese", "Spanish")
              - language_code: A standard two-letter language code (e.g., "en", "zh", "es")
              - is_english: Boolean indicating if the issue is primarily in English
              - needs_translation: Boolean indicating if translation is needed
              """
              
              user_prompt = f"Analyze this issue:\n\nTitle: {title}\n\nBody:\n{body}"
              
              try:
                  response = client.chat.completions.create(
                      model=AZURE_OPENAI_DEPLOYMENT,
                      messages=[
                          {"role": "system", "content": system_prompt},
                          {"role": "user", "content": user_prompt}
                      ],
                      response_format={"type": "json_object"},
                      temperature=0.2,
                  )
                  analysis = json.loads(response.choices[0].message.content)
                  return analysis
              except Exception as e:
                  print(f"Error analyzing issue: {e}")
                  return {
                      "language_name": "Unknown",
                      "language_code": "unknown",
                      "is_english": True,
                      "needs_translation": False
                  }

          def translate_text(text_to_translate, text_type="text", source_language="Unknown"):
              """Simplified translation function"""
              if not text_to_translate:
                  return ""
              
              system_prompt = f"""You are a precise translator from {source_language} to English.
              Your task is to translate the provided {text_type} accurately.
              IMPORTANT: Return ONLY the translated text without any additional commentary, prefixes, explanations, or notes.
              Do not add phrases like 'Translation:', 'Translated text:', etc.
              Just provide the direct translation while preserving the original formatting."""
              
              user_prompt = f"{text_to_translate}"
              
              try:
                  response = client.chat.completions.create(
                      model=AZURE_OPENAI_DEPLOYMENT,
                      messages=[
                          {"role": "system", "content": system_prompt},
                          {"role": "user", "content": user_prompt},
                      ],
                      temperature=0.2,
                      max_tokens=2000,
                  )
                  return response.choices[0].message.content.strip()
              except Exception as e:
                  print(f"Error translating {text_type}: {e}")
                  return f"Error during translation"

          def post_github_comment(repo, issue_num, comment_text):
              """Post a comment on a GitHub issue"""
              url = f"https://api.github.com/repos/{repo}/issues/{issue_num}/comments"
              headers = {
                  "Authorization": f"token {GITHUB_TOKEN}",
                  "Accept": "application/vnd.github.v3+json"
              }
              data = {"body": comment_text}
              try:
                  response = requests.post(url, headers=headers, json=data)
                  response.raise_for_status()
                  print(f"Successfully posted comment to issue #{issue_num}.")
              except Exception as e:
                  print(f"Error posting GitHub comment: {e}")

          def update_issue_title(repo, issue_num, new_title):
              """Update the title of a GitHub issue"""
              url = f"https://api.github.com/repos/{repo}/issues/{issue_num}"
              headers = {
                  "Authorization": f"token {GITHUB_TOKEN}",
                  "Accept": "application/vnd.github.v3+json"
              }
              data = {"title": new_title}
              try:
                  response = requests.patch(url, headers=headers, json=data)
                  response.raise_for_status()
                  print(f"Successfully updated issue #{issue_num} title to: {new_title}")
                  return True
              except Exception as e:
                  print(f"Error updating issue title: {e}")
                  return False

          # --- Main Logic ---
          if __name__ == "__main__":
              print(f"Processing event '{EVENT_NAME}' for issue #{ISSUE_NUMBER} in repository {REPO_FULL_NAME}")
              
              # Determine if we're processing an issue or a comment
              is_comment = EVENT_NAME == "issue_comment"
              content_to_analyze = COMMENT_BODY if is_comment else ISSUE_BODY
              content_type = "comment" if is_comment else "issue body"
              
              if not content_to_analyze:
                  print(f"The {content_type} is empty. Skipping analysis.")
                  exit(0)

              # Analyze language
              if is_comment:
                  # For comments, we only analyze the comment body
                  analysis = analyze_language_and_issue("", content_to_analyze)
              else:
                  # For issues, we analyze both title and body
                  analysis = analyze_language_and_issue(ISSUE_TITLE, content_to_analyze)
                  
              print(f"Analysis results: {json.dumps(analysis, indent=2)}")
              
              # Only add translation if needed
              if analysis.get("needs_translation", False):
                  source_language = analysis.get("language_name", "Unknown")
                  print(f"Non-English {content_type} detected ({source_language}). Proceeding with translation.")
                  
                  # Build simplified comment with just header and translation
                  comment = "Bot detected the issue body's language is not English, translate it automatically. 👯👭🏻🧑‍🤝‍🧑👫🧑🏿‍🤝‍🧑🏻👩🏾‍🤝‍👨🏿👬🏿\n\n"
                  
                  if is_comment:
                      # Only translate comment body for comments
                      translated_content = translate_text(content_to_analyze, content_type, source_language)
                      comment += translated_content
                  else:
                      # Translate both title and body for issues
                      translated_title = translate_text(ISSUE_TITLE, "title", source_language)
                      translated_body = translate_text(content_to_analyze, "body", source_language)
                      comment += translated_body
                      
                      # Update the issue title with bilingual format if enabled
                      if ENABLE_BILINGUAL_TITLE and not is_comment:
                          bilingual_title = f"{translated_title}（{ISSUE_TITLE}）"
                          update_issue_title(REPO_FULL_NAME, ISSUE_NUMBER, bilingual_title)
                  
                  # Post the comment
                  post_github_comment(REPO_FULL_NAME, ISSUE_NUMBER, comment)
                  print("Translation completed.")
              else:
                  print("No translation needed. Skipping comment.")
          EOF
