name: Sync Dev to GitLab and Rebase

on:
  push:
    branches:
      - dev

env:
  GITLAB_REPO: ${{ secrets.GITLAB_REPO }}
  GITLAB_USER: ${{ secrets.GITLAB_USER }}
  GITLAB_EMAIL: ${{ secrets.GITLAB_EMAIL }}
  HOME: /home/gitlab

jobs:
  sync-and-rebase:
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    runs-on: [self-hosted, Linux, X64, sync, gitlab, dev]

    steps:
      - name: Checkout GitHub repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git configuration
        run: |
          git config --global user.name "${{ env.GITLAB_USER }}"
          git config --global user.email "${{ env.GITLAB_EMAIL }}"
          git config --global push.default simple

      - name: Add GitLab remote and authenticate
        run: |
          git remote remove gitlab 2>/dev/null || true
          git remote add gitlab https://oauth2:${{ secrets.GITLAB_TOKEN_CLOUD }}@${{ secrets.GITLAB_REPO }}

      - name: Fetch all branches from GitLab
        run: |
          git fetch gitlab
          git fetch origin

      - name: Force push GitHub dev to GitLab dev
        run: |
          echo "🚀 Force pushing GitHub dev to GitLab dev..."
          git push gitlab origin/dev:dev --force
          echo "✅ Successfully pushed GitHub dev to GitLab dev"

      - name: Check if GitLab br/dev branch exists
        id: check_br_dev
        run: |
          if git ls-remote --heads gitlab br/dev | grep -q "br/dev"; then
            echo "br_dev_exists=true" >> $GITHUB_OUTPUT
            echo "📋 GitLab br/dev branch exists"
          else
            echo "br_dev_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ GitLab br/dev branch does not exist"
          fi

      - name: Rebase GitLab br/dev onto dev
        if: steps.check_br_dev.outputs.br_dev_exists == 'true'
        id: rebase
        run: |
          echo "🔄 Starting rebase of GitLab br/dev onto dev..."

          # Checkout GitLab dev branch
          git checkout -B temp-dev gitlab/dev

          # Checkout GitLab br/dev branch
          git checkout -B temp-br-dev gitlab/br/dev

          # Attempt to rebase br/dev onto dev
          if git rebase temp-dev; then
            echo "✅ Rebase successful, no conflicts detected"
            echo "rebase_status=success" >> $GITHUB_OUTPUT
            
            # Push the rebased br/dev back to GitLab
            git push gitlab temp-br-dev:br/dev --force
            echo "✅ Successfully pushed rebased br/dev to GitLab"
          else
            echo "❌ Rebase failed due to conflicts"
            echo "rebase_status=conflict" >> $GITHUB_OUTPUT
            
            # Abort the rebase
            git rebase --abort
          fi

      - name: Get workflow context for email notification
        if: steps.rebase.outputs.rebase_status == 'conflict'
        id: context
        run: |
          echo "build_start=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_OUTPUT
          echo "build_end=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_OUTPUT
          echo "build_duration=0" >> $GITHUB_OUTPUT
          echo "commit_author=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT
          echo "commit_email=$(git log -1 --pretty=format:'%ae')" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=format:'%s')" >> $GITHUB_OUTPUT
          echo "commit_sha=$(git log -1 --pretty=format:'%H')" >> $GITHUB_OUTPUT
          echo "commit_sha_short=$(git log -1 --pretty=format:'%h')" >> $GITHUB_OUTPUT
          echo "commit_date=$(git log -1 --pretty=format:'%ci')" >> $GITHUB_OUTPUT

      - name: Send conflict notification email
        if: steps.rebase.outputs.rebase_status == 'conflict'
        uses: ./.github/actions/email-notification
        with:
          # 根据实际状态设置邮件状态
          status: ${{ steps.rebase.outputs.rebase_status == 'conflict' && 'failure' || 'success' }}
          smtp_server: smtp.feishu.cn
          smtp_port: 465
          smtp_user: ${{ secrets.SMTP_USER }}
          smtp_pass: ${{ secrets.SMTP_PASS }}
          recipient: quehaohui@dp.tech
          architecture: 'amd64'
          pr_number: ${{ github.event.number || '0' }}
          pr_title: ${{ github.event.pull_request.title || 'Direct push to dev' }}
          pr_url: ${{ github.event.pull_request.html_url || github.event.head_commit.url || format('https://github.com/{0}/actions/runs/{1}', github.repository, github.run_id) }}
          head_ref: 'br/dev'
          base_ref: 'dev'
          repo: ${{ github.repository }}
          run_id: ${{ github.run_id }}
          build_start: ${{ steps.context.outputs.build_start }}
          build_end: ${{ steps.context.outputs.build_end }}
          build_duration: ${{ steps.context.outputs.build_duration }}
          commit_author: ${{ steps.context.outputs.commit_author }}
          commit_email: ${{ steps.context.outputs.commit_email }}
          commit_message: 'GitLab rebase conflict: ${{ steps.context.outputs.commit_message }}'
          commit_sha: ${{ steps.context.outputs.commit_sha }}
          commit_sha_short: ${{ steps.context.outputs.commit_sha_short }}
          commit_date: ${{ steps.context.outputs.commit_date }}
          service_image: 'N/A'
          protium_image: 'N/A'

      - name: Summary
        run: |
          echo "## 🎯 Sync and Rebase Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub → GitLab dev**: ✅ Force push completed" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.check_br_dev.outputs.br_dev_exists }}" == "true" ]]; then
            if [[ "${{ steps.rebase.outputs.rebase_status }}" == "success" ]]; then
              echo "- **GitLab br/dev rebase**: ✅ Successful, no conflicts" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ steps.rebase.outputs.rebase_status }}" == "conflict" ]]; then
              echo "- **GitLab br/dev rebase**: ❌ Failed due to conflicts" >> $GITHUB_STEP_SUMMARY
              echo "- **Email notification**: 📧 Sent to ${{ secrets.GITLAB_EMAIL }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **GitLab br/dev**: ⚠️ Branch does not exist, skipped rebase" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cleanup
        if: always()
        run: |
          git checkout -B dev origin/dev 2>/dev/null || git checkout dev 2>/dev/null || true
          git branch -D temp-dev 2>/dev/null || true
          git branch -D temp-br-dev 2>/dev/null || true
          git remote remove gitlab 2>/dev/null || true
