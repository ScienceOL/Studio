name: Auto-rebase dev on main

on:
  push:
    branches:
      - main
  # 避免标签触发的合并导致循环触发
  workflow_run:
    workflows: ['Merge Tag to Main']
    types:
      - completed

jobs:
  rebase-dev:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 允许强制推送

    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v4
        with:
          ref: dev
          # 使用 PAT 以绕过受保护分支的限制
          token: ${{ secrets.DEV_PAT }}
          fetch-depth: 0 # 获取完整提交历史

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Fetch latest main branch
        run: git fetch origin main:main

      - name: Create backup branch before rebase
        run: |
          # 创建备份分支以防万一
          BACKUP_BRANCH="backup-dev-$(date +%Y%m%d-%H%M%S)"
          git branch $BACKUP_BRANCH
          echo "Created backup branch: $BACKUP_BRANCH"

      - name: Check for concurrent changes
        run: |
          # 检查是否有其他人同时修改了 dev 分支
          git fetch origin dev
          LOCAL_SHA=$(git rev-parse HEAD)
          REMOTE_SHA=$(git rev-parse origin/dev)
          if [ "$LOCAL_SHA" != "$REMOTE_SHA" ]; then
            echo "::warning::Dev branch has been updated during sync, will proceed with caution"
          fi

      - name: Rebase dev onto main (自动冲突解决)
        run: |
          # 执行变基，冲突时自动选择 dev 的代码
          echo "开始 rebase，保留 dev 分支的所有修改..."
          git rebase main || {
            echo "检测到冲突，自动解决并保留 dev 分支的修改"
            git diff --name-only --diff-filter=U | xargs -I {} git checkout --ours {}
            git add -A
            git rebase --continue
          }
          echo "Rebase 完成，所有 dev 分支的修改都已保留"

      - name: Force push dev branch with skip-ci message
        run: |
          # 添加 [skip ci] 标记来避免触发 CI
          git commit --amend -m "$(git log -1 --pretty=%B) [skip ci]" || true
          git push origin dev --force
