name: PR Code Quality Checks

on:
  pull_request:
    branches:
      - main
      - dev
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '23'
  PYTHON_VERSION: '3.13.3'

jobs:
  frontend-checks:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: 'web/yarn.lock'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: |
            web/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('web/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Verify dependencies (when cache hit)
        if: steps.yarn-cache.outputs.cache-hit == 'true'
        run: yarn install --frozen-lockfile --offline

      - name: Run TypeScript type checking
        run: yarn typecheck

      - name: Run ESLint
        run: yarn lint

    #   - name: Run Prettier format check
    #     run: yarn prettier --check .

    #   - name: Build check
    #     run: yarn build

  backend-checks:
    name: Backend Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Cache Python packages
        uses: actions/cache@v4
        id: python-cache
        with:
          path: |
            ~/.cache/uv
            ~/.cache/pip
            /opt/hostedtoolcache/Python/${{ env.PYTHON_VERSION }}/*/lib/python*/site-packages
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('service/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-python-

      - name: Cache APT packages
        uses: actions/cache@v4
        id: apt-cache
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/pr-checks.yaml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install system dependencies
        run: |
          if [ "${{ steps.apt-cache.outputs.cache-hit }}" != "true" ]; then
            sudo apt-get update
          fi
          sudo apt-get install -y libpq-dev

      - name: Install Python dependencies
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: |
          uv pip install -r requirements.txt --system

      - name: Verify Python dependencies (when cache hit)
        if: steps.python-cache.outputs.cache-hit == 'true'
        run: |
          uv pip install -r requirements.txt --system --no-deps

      #   - name: Run Black format check
      #     run: black --check --diff --config=pyproject.toml .

      #   - name: Run isort import check
      #     run: isort --check-only --diff --settings-path=pyproject.toml .

      #   - name: Run Flake8 linting
      #     run: flake8 --config=setup.cfg .
      #     continue-on-error: true

      #   - name: Run MyPy type checking
      #     run: mypy --config-file=pyproject.toml .
      #     continue-on-error: true

      - name: Run Django system checks
        env:
          DATABASE_ENGINE: django.db.backends.sqlite3
          DATABASE_NAME: ':memory:'
          SECRET_KEY: 'test-secret-key-for-ci'
          DEBUG: 'True'
          ALLOWED_HOSTS: 'localhost,127.0.0.1'
        run: python manage.py check

    #   - name: Check for missing migrations
    #     env:
    #       DATABASE_ENGINE: django.db.backends.sqlite3
    #       DATABASE_NAME: ':memory:'
    #       SECRET_KEY: 'test-secret-key-for-ci'
    #       DEBUG: 'True'
    #       ALLOWED_HOSTS: 'localhost,127.0.0.1'
    #     run: python manage.py makemigrations --check --dry-run

  #   go-checks:
  #     name: Go Quality Checks
  #     runs-on: ubuntu-latest
  #     defaults:
  #       run:
  #         working-directory: ./core

  #     steps:
  #       - name: Checkout repository
  #         uses: actions/checkout@v4
  #         with:
  #           fetch-depth: 0

  #       - name: Setup Go
  #         uses: actions/setup-go@v4
  #         with:
  #           go-version: '1.21'
  #           cache-dependency-path: 'core/go.sum'

  #       - name: Download dependencies
  #         run: go mod download

  #       - name: Run go vet
  #         run: go vet ./...

  #       - name: Run gofmt check
  #         run: |
  #           if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
  #             echo "以下文件格式不正确："
  #             gofmt -s -l .
  #             echo "请运行 'gofmt -s -w .' 来修复格式问题"
  #             exit 1
  #           fi

  #       - name: Build check
  #         run: go build -v ./...

  summary:
    name: Quality Check Summary
    needs: [frontend-checks, backend-checks]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check results
        run: |
          echo "## 代码质量检查结果 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.frontend-checks.result }}" == "success" ]; then
            echo "✅ 前端检查通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 前端检查失败" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.backend-checks.result }}" == "success" ]; then
            echo "✅ 后端检查通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 后端检查失败" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 检查内容" >> $GITHUB_STEP_SUMMARY
          echo "- **前端**: TypeScript 类型检查、ESLint 代码检查、Prettier 格式检查、构建检查" >> $GITHUB_STEP_SUMMARY
          echo "- **后端**: Black 格式检查、isort 导入排序、Flake8 代码检查、MyPy 类型检查、Django 系统检查、数据库迁移检查" >> $GITHUB_STEP_SUMMARY
          echo "- **Go**: go vet 静态分析、gofmt 格式检查、构建检查" >> $GITHUB_STEP_SUMMARY

      - name: Fail if any check failed
        if: needs.frontend-checks.result != 'success' || needs.backend-checks.result != 'success'
        run: exit 1
