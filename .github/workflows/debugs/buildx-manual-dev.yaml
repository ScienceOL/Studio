name: Manual Build x64 Docker Images (Dev)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment configuration file'
        required: true
        default: '.github/config/test-env.yaml'
        type: choice
        options:
          - '.github/config/test-env.yaml'
          - '.github/config/prod-env.yaml'
      recipient:
        description: 'Email notification recipient'
        required: true
        default: 'quehaohui@dp.tech'

env:
  SERVICE_IMAGE: registry.aissquare.com/web/service:dev
  PROTIUM_IMAGE: registry.cn-shanghai.aliyuncs.com/scienceol/protium:dev

jobs:
  build-and-push:
    name: Build for amd64
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup build environment
        id: build_setup
        uses: ./.github/actions/build-setup
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          platforms: linux/amd64
          install: true

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: registry.cn-shanghai.aliyuncs.com
          username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}

      - name: Load environment configuration
        id: env_config
        shell: bash
        run: |
          # Read the yaml file and convert to env vars
          echo "Loading environment configuration from ${{ github.event.inputs.environment }}..."

          # Check if yq is installed, use it if available (best option)
          if command -v yq &> /dev/null; then
            echo "Using yq to parse YAML..."
            # Extract all variables and set them as outputs
            NODE_ENV=$(yq eval '.NODE_ENV' ${{ github.event.inputs.environment }})
            APP_NAME=$(yq eval '.APP_NAME' ${{ github.event.inputs.environment }})
            SITE_URL=$(yq eval '.SITE_URL' ${{ github.event.inputs.environment }})
            BASE_URL=$(yq eval '.BASE_URL' ${{ github.event.inputs.environment }})
            MEDIA_URL=$(yq eval '.MEDIA_URL' ${{ github.event.inputs.environment }})
            WS_URL=$(yq eval '.WS_URL' ${{ github.event.inputs.environment }})
            BRM_OAUTH_CLIENT_ID=$(yq eval '.BRM_OAUTH_CLIENT_ID' ${{ github.event.inputs.environment }})
            BRM_OAUTH_URL=$(yq eval '.BRM_OAUTH_URL' ${{ github.event.inputs.environment }})
          else
            # Fallback to simple grep/sed (less robust but works for simple files)
            echo "yq not found, falling back to grep/sed..."
            NODE_ENV=$(grep "NODE_ENV:" ${{ github.event.inputs.environment }} | sed 's/NODE_ENV: //')
            APP_NAME=$(grep "APP_NAME:" ${{ github.event.inputs.environment }} | sed 's/APP_NAME: //')
            SITE_URL=$(grep "SITE_URL:" ${{ github.event.inputs.environment }} | sed 's/SITE_URL: //')
            BASE_URL=$(grep "BASE_URL:" ${{ github.event.inputs.environment }} | sed 's/BASE_URL: //')
            MEDIA_URL=$(grep "MEDIA_URL:" ${{ github.event.inputs.environment }} | sed 's/MEDIA_URL: //')
            WS_URL=$(grep "WS_URL:" ${{ github.event.inputs.environment }} | sed 's/WS_URL: //')
            BRM_OAUTH_CLIENT_ID=$(grep "BRM_OAUTH_CLIENT_ID:" ${{ github.event.inputs.environment }} | sed 's/BRM_OAUTH_CLIENT_ID: //')
            BRM_OAUTH_URL=$(grep "BRM_OAUTH_URL:" ${{ github.event.inputs.environment }} | sed 's/BRM_OAUTH_URL: //')
          fi

          # Remove any quotes that might be present
          NODE_ENV=$(echo $NODE_ENV | tr -d '"' | tr -d "'")
          APP_NAME=$(echo $APP_NAME | tr -d '"' | tr -d "'")
          SITE_URL=$(echo $SITE_URL | tr -d '"' | tr -d "'")
          BASE_URL=$(echo $BASE_URL | tr -d '"' | tr -d "'")
          MEDIA_URL=$(echo $MEDIA_URL | tr -d '"' | tr -d "'")
          WS_URL=$(echo $WS_URL | tr -d '"' | tr -d "'")
          BRM_OAUTH_CLIENT_ID=$(echo $BRM_OAUTH_CLIENT_ID | tr -d '"' | tr -d "'")
          BRM_OAUTH_URL=$(echo $BRM_OAUTH_URL | tr -d '"' | tr -d "'")

          # Set as outputs
          echo "node_env=$NODE_ENV" >> $GITHUB_OUTPUT
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "site_url=$SITE_URL" >> $GITHUB_OUTPUT
          echo "base_url=$BASE_URL" >> $GITHUB_OUTPUT
          echo "media_url=$MEDIA_URL" >> $GITHUB_OUTPUT
          echo "ws_url=$WS_URL" >> $GITHUB_OUTPUT
          echo "brm_oauth_client_id=$BRM_OAUTH_CLIENT_ID" >> $GITHUB_OUTPUT
          echo "brm_oauth_url=$BRM_OAUTH_URL" >> $GITHUB_OUTPUT

          echo "Environment configuration loaded successfully"

      - name: Build and push service image
        uses: docker/build-push-action@v5
        with:
          context: ./service/
          file: ./service/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.SERVICE_IMAGE }}
          cache-from: |
            type=registry,ref=${{ env.SERVICE_IMAGE }}
            type=registry,ref=${{ env.SERVICE_IMAGE }},mode=max
          cache-to: type=inline,mode=max

      - name: Build and push protium image
        uses: docker/build-push-action@v5
        with:
          context: ./web/
          file: ./web/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.PROTIUM_IMAGE }}
          cache-from: |
            type=registry,ref=${{ env.PROTIUM_IMAGE }}
            type=registry,ref=${{ env.PROTIUM_IMAGE }},mode=max
          cache-to: type=inline,mode=max
          build-args: |
            NODE_ENV=${{ steps.env_config.outputs.node_env }}
            NEXT_PUBLIC_PLATFORM=${{ steps.env_config.outputs.app_name }}
            NEXT_PUBLIC_SITE_URL=${{ steps.env_config.outputs.site_url }}
            NEXT_PUBLIC_BASE_URL=${{ steps.env_config.outputs.base_url }}
            NEXT_PUBLIC_MEDIA_URL=${{ steps.env_config.outputs.media_url }}
            NEXT_PUBLIC_WS_URL=${{ steps.env_config.outputs.ws_url }}
            NEXT_PUBLIC_BRM_OAUTH_CLIENT_ID=${{ steps.env_config.outputs.brm_oauth_client_id }}
            NEXT_PUBLIC_BRM_OAUTH_URL=${{ steps.env_config.outputs.brm_oauth_url }}

      # - name: Verify Docker images
      #   id: image_verify
      #   uses: ./.github/actions/image-verification
      #   with:
      #     architecture: amd64
      #     service_image: ${{ env.SERVICE_IMAGE }}
      #     protium_image: ${{ env.PROTIUM_IMAGE }}
      #     test_amd64: true

      - name: Calculate build duration
        if: always()
        id: build_duration
        shell: bash
        run: |
          # 确保 build_start 有值
          BUILD_START="${{ steps.build_setup.outputs.build_start }}"
          if [ -z "$BUILD_START" ]; then
            echo "Warning: build_start is empty, using current time as fallback"
            BUILD_START=$(date '+%Y-%m-%d %H:%M:%S')
          fi

          if [[ $(uname) == 'Darwin' ]]; then
            BUILD_START_SEC=$(date -j -f "%Y-%m-%d %H:%M:%S" "$BUILD_START" +%s)
          else
            BUILD_START_SEC=$(date -d "$BUILD_START" +%s)
          fi
          BUILD_END=$(date '+%Y-%m-%d %H:%M:%S')
          BUILD_END_SEC=$(date +%s)
          DURATION_SEC=$((BUILD_END_SEC - BUILD_START_SEC))

          # Format as hours:minutes:seconds
          HOURS=$((DURATION_SEC / 3600))
          MINUTES=$(((DURATION_SEC % 3600) / 60))
          SECONDS=$((DURATION_SEC % 60))

          DURATION="${HOURS}h ${MINUTES}m ${SECONDS}s"

          echo "build_end=$BUILD_END" >> $GITHUB_ENV
          echo "build_duration=$DURATION" >> $GITHUB_ENV

      - name: Send build notification
        if: always()
        uses: ./.github/actions/email-notification
        with:
          status: ${{ job.status }}
          smtp_server: smtp.feishu.cn
          smtp_port: 465
          smtp_user: ${{ secrets.SMTP_USER }}
          smtp_pass: ${{ secrets.SMTP_PASS }}
          recipient: ${{ github.event.inputs.recipient }}
          architecture: amd64
          pr_number: 'Manual'
          pr_title: 'Manual build from dev branch'
          pr_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          head_ref: 'dev'
          base_ref: 'dev'
          repo: ${{ github.repository }}
          run_id: ${{ github.run_id }}
          build_start: ${{ steps.build_setup.outputs.build_start }}
          build_end: ${{ env.build_end }}
          build_duration: ${{ env.build_duration }}
          commit_author: ${{ steps.build_setup.outputs.commit_author }}
          commit_email: ${{ steps.build_setup.outputs.commit_email }}
          commit_message: ${{ steps.build_setup.outputs.commit_message }}
          commit_sha: ${{ steps.build_setup.outputs.commit_sha }}
          commit_sha_short: ${{ steps.build_setup.outputs.commit_sha_short }}
          commit_date: ${{ steps.build_setup.outputs.commit_date }}
          service_image: ${{ env.SERVICE_IMAGE }}
          protium_image: ${{ env.PROTIUM_IMAGE }}
