name: 'Docker Build and Push'
description: 'Builds and pushes Docker images for specified architectures'

inputs:
  architecture:
    description: 'Target architecture (amd64 or arm64)'
    required: true
  registry:
    description: 'Docker registry URL'
    required: true
  username:
    description: 'Registry username'
    required: true
  password:
    description: 'Registry password'
    required: true
  service_image:
    description: 'Service image name with tag'
    required: true
  protium_image:
    description: 'Protium image name with tag'
    required: true
  env_file:
    description: 'Path to environment configuration file'
    required: false
    default: '.github/config/env.yaml'

outputs:
  service_image_tag:
    description: 'Full service image tag with architecture'
    value: ${{ inputs.service_image }}-${{ inputs.architecture }}
  protium_image_tag:
    description: 'Full protium image tag with architecture'
    value: ${{ inputs.protium_image }}-${{ inputs.architecture }}
  service_digest:
    description: 'SHA256 digest of the service image'
    value: ${{ steps.service_build.outputs.digest }}
  protium_digest:
    description: 'SHA256 digest of the protium image'
    value: ${{ steps.protium_build.outputs.digest }}

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        platforms: linux/amd64,linux/arm64
        install: true

    - name: Login to Docker Registry
      shell: bash
      run: |
        # 禁用凭证存储
        mkdir -p ~/.docker
        echo '{"credsStore":"","auths":{"${{ inputs.registry }}":{}}}' > ~/.docker/config.json
        # 直接使用命令行登录
        echo "${{ inputs.password }}" | docker login ${{ inputs.registry }} --username ${{ inputs.username }} --password-stdin

    - name: Load environment configuration
      id: env_config
      shell: bash
      run: |
        # Read the yaml file and convert to env vars
        echo "Loading environment configuration from ${{ inputs.env_file }}..."

        # Check if yq is installed, use it if available (best option)
        if command -v yq &> /dev/null; then
          echo "Using yq to parse YAML..."
          # Extract all variables and set them as outputs
          NODE_ENV=$(yq eval '.NODE_ENV' ${{ inputs.env_file }})
          APP_NAME=$(yq eval '.APP_NAME' ${{ inputs.env_file }})
          SITE_URL=$(yq eval '.SITE_URL' ${{ inputs.env_file }})
          BASE_URL=$(yq eval '.BASE_URL' ${{ inputs.env_file }})
          MEDIA_URL=$(yq eval '.MEDIA_URL' ${{ inputs.env_file }})
          WS_URL=$(yq eval '.WS_URL' ${{ inputs.env_file }})
          BRM_OAUTH_CLIENT_ID=$(yq eval '.BRM_OAUTH_CLIENT_ID' ${{ inputs.env_file }})
          BRM_OAUTH_URL=$(yq eval '.BRM_OAUTH_URL' ${{ inputs.env_file }})
        else
          # Fallback to simple grep/sed (less robust but works for simple files)
          echo "yq not found, falling back to grep/sed..."
          NODE_ENV=$(grep "NODE_ENV:" ${{ inputs.env_file }} | sed 's/NODE_ENV: //')
          APP_NAME=$(grep "APP_NAME:" ${{ inputs.env_file }} | sed 's/APP_NAME: //')
          SITE_URL=$(grep "SITE_URL:" ${{ inputs.env_file }} | sed 's/SITE_URL: //')
          BASE_URL=$(grep "BASE_URL:" ${{ inputs.env_file }} | sed 's/BASE_URL: //')
          MEDIA_URL=$(grep "MEDIA_URL:" ${{ inputs.env_file }} | sed 's/MEDIA_URL: //')
          WS_URL=$(grep "WS_URL:" ${{ inputs.env_file }} | sed 's/WS_URL: //')
          BRM_OAUTH_CLIENT_ID=$(grep "BRM_OAUTH_CLIENT_ID:" ${{ inputs.env_file }} | sed 's/BRM_OAUTH_CLIENT_ID: //')
          BRM_OAUTH_URL=$(grep "BRM_OAUTH_URL:" ${{ inputs.env_file }} | sed 's/BRM_OAUTH_URL: //')
        fi

        # Remove any quotes that might be present
        NODE_ENV=$(echo $NODE_ENV | tr -d '"' | tr -d "'")
        APP_NAME=$(echo $APP_NAME | tr -d '"' | tr -d "'")
        SITE_URL=$(echo $SITE_URL | tr -d '"' | tr -d "'")
        BASE_URL=$(echo $BASE_URL | tr -d '"' | tr -d "'")
        MEDIA_URL=$(echo $MEDIA_URL | tr -d '"' | tr -d "'")
        WS_URL=$(echo $WS_URL | tr -d '"' | tr -d "'")
        BRM_OAUTH_CLIENT_ID=$(echo $BRM_OAUTH_CLIENT_ID | tr -d '"' | tr -d "'")
        BRM_OAUTH_URL=$(echo $BRM_OAUTH_URL | tr -d '"' | tr -d "'")

        # Set as outputs
        echo "node_env=$NODE_ENV" >> $GITHUB_OUTPUT
        echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
        echo "site_url=$SITE_URL" >> $GITHUB_OUTPUT
        echo "base_url=$BASE_URL" >> $GITHUB_OUTPUT
        echo "media_url=$MEDIA_URL" >> $GITHUB_OUTPUT
        echo "ws_url=$WS_URL" >> $GITHUB_OUTPUT
        echo "brm_oauth_client_id=$BRM_OAUTH_CLIENT_ID" >> $GITHUB_OUTPUT
        echo "brm_oauth_url=$BRM_OAUTH_URL" >> $GITHUB_OUTPUT

        echo "Environment configuration loaded successfully:"
        echo "NODE_ENV: $NODE_ENV"
        echo "APP_NAME: $APP_NAME"
        echo "SITE_URL: $SITE_URL"
        echo "BASE_URL: $BASE_URL"
        echo "MEDIA_URL: $MEDIA_URL"
        echo "WS_URL: $WS_URL"
        echo "BRM_OAUTH_CLIENT_ID: $BRM_OAUTH_CLIENT_ID"
        echo "BRM_OAUTH_URL: $BRM_OAUTH_URL"

    - name: Build and push service image
      id: service_build
      uses: docker/build-push-action@v5
      with:
        context: ./service/
        file: ./service/Dockerfile
        platforms: linux/${{ inputs.architecture }}
        push: true
        tags: ${{ inputs.service_image }}-${{ inputs.architecture }}
        cache-from: |
          type=registry,ref=${{ inputs.service_image }}
          type=registry,ref=${{ inputs.service_image }},mode=max
        cache-to: type=inline,mode=max

    - name: Build and push protium image
      id: protium_build
      uses: docker/build-push-action@v5
      with:
        context: ./web/
        file: ./web/Dockerfile
        platforms: linux/${{ inputs.architecture }}
        push: true
        tags: ${{ inputs.protium_image }}-${{ inputs.architecture }}
        cache-from: |
          type=registry,ref=${{ inputs.protium_image }}
          type=registry,ref=${{ inputs.protium_image }},mode=max
        cache-to: type=inline,mode=max
        build-args: |
          NODE_ENV=${{ steps.env_config.outputs.node_env }}
          NEXT_PUBLIC_PLATFORM=${{ steps.env_config.outputs.app_name }}
          NEXT_PUBLIC_SITE_URL=${{ steps.env_config.outputs.site_url }}
          NEXT_PUBLIC_BASE_URL=${{ steps.env_config.outputs.base_url }}
          NEXT_PUBLIC_MEDIA_URL=${{ steps.env_config.outputs.media_url }}
          NEXT_PUBLIC_WS_URL=${{ steps.env_config.outputs.ws_url }}
          NEXT_PUBLIC_BRM_OAUTH_CLIENT_ID=${{ steps.env_config.outputs.brm_oauth_client_id }}
          NEXT_PUBLIC_BRM_OAUTH_URL=${{ steps.env_config.outputs.brm_oauth_url }}

    - name: Output image digests
      shell: bash
      run: |
        echo "Service image digest: ${{ steps.service_build.outputs.digest }}"
        echo "Protium image digest: ${{ steps.protium_build.outputs.digest }}"
